# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Pipeline that runs AML Pipeline for model training

# trigger:
#   branches:
#     include:
#     - v2-preview
#   paths:
#     include:
#     - Custom_Script/mlops-pipelines/3-modeling/*
#     - Custom_Script/mlops-pipelines/scripts/deploy_grouped_models.py
#     - Custom_Script/scripts/forecast_webservice.py
#     - Custom_Script/scripts/routing_webservice.py
#     - Custom_Script/scripts/routing_webservice.conda.yml

# schedules:
# - cron: "0 0 * * 1"
#   displayName: 'Weekly training at midnight on Mondays'
#   branches:
#     include:
#     - v2-preview
#   always: true

variables:
- template: ../many-models-variables.yml
- group: manymodels-vg

pool:
  vmImage: ubuntu-latest

stages:

- stage: update_data
  displayName: 'Update Data for Training/Retraining'
  jobs:
  - template: update-data/update-data.template.yml
    parameters:
      sdkVersion: '$(SDK_VERSION)'
      serviceConnection: '$(SERVICECONNECTION_WORKSPACE)'
      resourceGroup: '$(RESOURCE_GROUP)'
      amlWorkspaceName: '$(AMLWORKSPACE_NAME)'
      amlDatasetName: '$(AML_DATASET_NAME)'
      maxFiles: '$(DATASET_MAXFILES)'

- stage: run_training
  displayName: 'Run Model Training'
  dependsOn: update_data
  jobs:
  - template: run-training/run-training.template.yml
    parameters:
      serviceConnection: '$(SERVICECONNECTION_WORKSPACE)'
      resourceGroup: '$(RESOURCE_GROUP)'
      amlWorkspaceName: '$(AMLWORKSPACE_NAME)'
      trainingPipelineName: '$(AML_TRAINING_PIPELINE_NAME)'

- stage: deploy_models_aci
  displayName: 'Deploy Models to ACI'
  dependsOn: run_training
  condition: and(succeeded(), eq(variables['DEPLOY_ACI'], 'true'))
  jobs:
  - template: deploy-models/deploy-models.template.yml
    parameters:
      sdkVersion: '$(SDK_VERSION)'
      serviceConnection: '$(SERVICECONNECTION_WORKSPACE)'
      resourceGroup: '$(RESOURCE_GROUP)'
      amlWorkspaceName: '$(AMLWORKSPACE_NAME)'
      deploymentType: aci
      amlAksName: ''
      splittingTags: '$(AML_MODEL_SPLITTING_TAGS)'
      sortingTags: '$(AML_MODEL_SORTING_TAGS)'
      webservicePrefix: test-'$(AML_WEBSERVICE_PREFIX)'
      containerSize: '$(AML_MAX_CONTAINER_SIZE)'
      routingModelName: test-'$(AML_ROUTING_MODEL_NAME)'
      routingModelTagName: '$(AML_ROUTING_MODEL_TAG_NAME)'
      routingModelTagValue: '$(AML_ROUTING_MODEL_TAG_VALUE)'
      routingServiceName: test-'$(AML_ROUTING_WEBSERVICE)'

- stage: deploy_models_aks
  displayName: 'Deploy Models to AKS'
  dependsOn: run_training
  condition: and(succeeded(), eq(variables['DEPLOY_AKS'], 'true'), variables['AML_AKS_NAME'])
  jobs:
  - template: deploy-models/deploy-models.template.yml
    parameters:
      sdkVersion: '$(SDK_VERSION)'
      serviceConnection: '$(SERVICECONNECTION_WORKSPACE)'
      resourceGroup: '$(RESOURCE_GROUP)'
      amlWorkspaceName: '$(AMLWORKSPACE_NAME)'
      deploymentType: aks
      amlAksName: '$(AML_AKS_NAME)'
      splittingTags: '$(AML_MODEL_SPLITTING_TAGS)'
      sortingTags: '$(AML_MODEL_SORTING_TAGS)'
      webservicePrefix: '$(AML_WEBSERVICE_PREFIX)'
      containerSize: '$(AML_MAX_CONTAINER_SIZE)'
      routingModelName: '$(AML_ROUTING_MODEL_NAME)'
      routingModelTagName: '$(AML_ROUTING_MODEL_TAG_NAME)'
      routingModelTagValue: '$(AML_ROUTING_MODEL_TAG_VALUE)'
      routingServiceName: '$(AML_ROUTING_WEBSERVICE)'
